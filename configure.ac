#                                               -*- Autoconf -*-
#
# Copyright (c) 2004,  Theodore A. Roth
# Copyright (c) 2005,2006,2007,2009  Anatoly Sokolov
# Copyright (c) 2005,2008  Joerg Wunsch
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright
#   notice, this list of conditions and the following disclaimer.
# * Redistributions in binary form must reproduce the above copyright
#   notice, this list of conditions and the following disclaimer in
#   the documentation and/or other materials provided with the
#   distribution.
# * Neither the name of the copyright holders nor the names of
#   contributors may be used to endorse or promote products derived
#   from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Process this file with autoconf to produce a configure script.


dnl library versioning -- modify these on releases
dnl        macro name           value            description
m4_define([avr_libc_major],    [2])dnl           major version
m4_define([avr_libc_minor],    [3])dnl           minor version
m4_define([avr_libc_revision], [0])dnl           revision (dot-dot version)
m4_define([avr_libc_revision_suffix], [git])dnl  revision suffix (if any)
m4_define([avr_libc_reldate],  [20240609])dnl    release date
dnl end of library versioning data

m4_define([avr_libc_version],
          avr_libc_major.avr_libc_minor.avr_libc_revision()avr_libc_revision_suffix)dnl
m4_define([avr_libc_version_numeric],
          m4_eval(10000 * avr_libc_major + dnl
                    100 * avr_libc_minor + dnl
                          avr_libc_revision))dnl

AC_INIT([avr-libc], [avr_libc_version],
	[https://github.com/avrdudes/avr-libc/issues])

AC_PREREQ([2.59])
AC_REVISION($Revision$)

AC_CONFIG_SRCDIR([doc/examples/demo/demo.c])
AC_CONFIG_HEADER([config.h])

dnl substitute M4 macros into shell variables
AVR_LIBC_MAJOR=avr_libc_major
AVR_LIBC_MINOR=avr_libc_minor
AVR_LIBC_REVISION=avr_libc_revision
AVR_LIBC_RELDATE=avr_libc_reldate
AVR_LIBC_VERSION=avr_libc_version
AVR_LIBC_VERSION_NUMERIC=avr_libc_version_numeric
dnl ...and trigger Makefile.in substitutions
AC_SUBST(AVR_LIBC_MAJOR)
AC_SUBST(AVR_LIBC_MINOR)
AC_SUBST(AVR_LIBC_REVISION)
AC_SUBST(AVR_LIBC_RELDATE)
AC_SUBST(AVR_LIBC_VERSION)
AC_SUBST(AVR_LIBC_VERSION_NUMERIC)

AC_CANONICAL_BUILD
AC_CANONICAL_HOST

# See if the user specified '--build=`../config.guess` --host=avr' when
# running ../configure.

AC_MSG_CHECKING([if configuring for cross compile])
if test "x${build_alias}" = "x${host_alias}"; then
	if test "x${build_alias}" = "x" ; then
		build_alias='`./config.guess`'
	fi
	AC_MSG_RESULT(no)
	AC_MSG_WARN()
	AC_MSG_WARN(AVR-LibC must be built using an avr cross-compiler.)
	AC_MSG_WARN(Try configuring with:)
	AC_MSG_WARN("$0 --build=$build_alias --host=avr")
	AC_MSG_WARN()
	AC_MSG_ERROR(aborting configure)
else
	AC_MSG_RESULT([yes])
fi

AC_MSG_CHECKING([if target host is avr])
case "$host" in
	avr* )
		AC_MSG_RESULT([yes])
		;;
	* )
		AC_MSG_RESULT(no)
		AC_MSG_WARN()
		AC_MSG_WARN(AVR-LibC must be built using an avr cross-compiler.)
		AC_MSG_WARN(Try configuring with:)
		AC_MSG_WARN("$0 --build=$build --host=avr")
		AC_MSG_WARN()
		AC_MSG_ERROR(aborting configure)
		;;
esac

## TODO: Write a check for GNU Make

dnl The default check whether the C compiler can create an executable
dnl is inappropriate for us as it requires an existing library.
AC_NO_EXECUTABLES

dnl Minimum version of Automake is 1.8.
dnl We don't want the gzip distribution tarball anymore.
AM_INIT_AUTOMAKE([1.8 dist-bzip2 no-dist-gzip])

dnl m4 files that are hand-written.
dnl Macros that are required by m4-gen are in m4/mlib-*.m4.
AC_CONFIG_MACRO_DIRS([m4])

dnl m4 files generated by devtools/mlib-gen.py
AC_CONFIG_MACRO_DIRS([m4-gen])

dnl Consumed by doc/api/main_page.dox.in.
AC_SUBST_FILE([LICENSE_FILE])
LICENSE_FILE=${srcdir}/LICENSE

# We don't want to use the cflags from the environment since we need control
# of this when we're building the libs.
CFLAGS=""


dnl This fix is from Newlib in config/override.m4.
dnl Fix 2.64 cross compile detection for AVR by not trying to compile fopen.
m4_if(m4_defn([m4_PACKAGE_VERSION]), [2.64],
  [m4_foreach([_GCC_LANG], [C, C++, Fortran, Fortran 77],
     [m4_define([_AC_LANG_IO_PROGRAM(]_GCC_LANG[)], m4_defn([AC_LANG_PROGRAM(]_GCC_LANG[)]))])])


# Checks for programs.

AC_PROG_CC
AC_CHECK_TOOL(AS, as, as)
AC_CHECK_TOOL(LD, ld, ld)
AM_PROG_AS
AC_PROG_RANLIB
AC_CHECK_TOOL(AR, ar, ar)
AC_CHECK_TOOL(OBJDUMP, objdump, objdump)

SHOW_VERSION([$CC], [CC])
SHOW_VERSION([$AS], [AS])
SHOW_VERSION([$LD], [LD])

dnl Issue a warning when CC's linker is not LD.
WARN_LINKER_MISMATCH

# Make sure that we found the right avr cross-compiler.

case "${CC}" in
   *gcc*)
       case "X`${CC} -dumpmachine`X" in
           XavrX) ;;
           *) AC_MSG_ERROR(Wrong C compiler found; check the PATH!) ;;
       esac
       ;;
   *) AC_MSG_ERROR(Wrong C compiler found; check the PATH!) ;;
esac
case "${AS}" in
   *avr*as*) ;;
   *) AC_MSG_ERROR(Wrong assembler found; check the PATH!) ;;
esac
case "${LD}" in
   *avr*ld*) ;;
   *) AC_MSG_ERROR(Wrong linker found; check the PATH!) ;;
esac
case "${OBJDUMP}" in
   *avr*objdump*) ;;
   *) AC_MSG_ERROR(Wrong objdump found; check the PATH!) ;;
esac
case "${AR}" in
   *avr*ar*) ;;
   *) AC_MSG_ERROR(Wrong archiver found; check the PATH!) ;;
esac
case "${RANLIB}" in
   *avr*ranlib*) ;;
   *) AC_MSG_ERROR(Wrong ranlib found; check the PATH!) ;;
esac

AC_PROG_INSTALL
AC_PROG_LN_S
AC_PROG_MAKE_SET

dnl Outcome is consumed by crt1/gcrt1.S
CHECK_OBJDUMP_MINUS_H([whether data region starts at __DATA_REGION_ORIGIN__],dnl
    [.data],dnl
    [-mmcu=avr2], [-mavr2 --defsym __DATA_REGION_ORIGIN__=0x800066],
    ['\.data.*00800066'],
    AC_DEFINE([HAVE_LDSCRIPT_PR29741], 1,
        [Define if the ld script uses __DATA_REGION_ORIGIN__ as data start.]),
)

dnl Outcome is consumed by crt1/gcrt1.S
CHECK_OBJDUMP_MINUS_H([whether text region starts at __TEXT_REGION_ORIGIN__],dnl
    [.data],dnl
    [-mmcu=avr2], [-mavr2 --defsym __TEXT_REGION_ORIGIN__=0x22],
    ['\.text.*00000022'],
    AC_DEFINE([HAVE_LDSCRIPT_PR31177], 1,
        [Define if the ld script uses __TEXT_REGION_ORIGIN__ as text start.]),
)


dnl Build a list of all .h files in  $srcdir/include/avr.
dnl Used by include/avr/Makefile.am::avr_HEADERS.
SUBST_BASENAME_FILES(AVRLIBC_INCLUDE_HFILES, [$srcdir/include/avr/*.h])

dnl Build a list of all .S files in  $srcdir/crt1/iosym.
dnl Used by crt1/iosym/Makefile.am::EXTRA_DIST.
SUBST_BASENAME_FILES(AVRLIBC_IOSYM_SFILES, [$srcdir/crt1/iosym/*.S])

dnl Build a list of all .m4 files in  $srcdir/m4.
dnl Used by m4/Makefile.am::EXTRA_DIST.
SUBST_BASENAME_FILES(AVRLIBC_M4_M4FILES, [$srcdir/m4/*.m4])

dnl Check if avr-gcc >= 5.1.0 as they expect device library.
GCC_VER=`${CC} -dumpversion`
AS_VERSION_COMPARE([${GCC_VER}], [5.1.0],
    [DEV_LIB="no"],
    [DEV_LIB="yes"],
    [DEV_LIB="yes"])
AM_CONDITIONAL(HAS_GCC_5_1, [test "x${GCC_VER}" = "x5.1.0"])

dnl Enable device library when specified. If not specified and
dnl gcc expects (e.g. >= 5) device lib then enable device library.
AC_ARG_ENABLE(device-lib,
[  --enable-device-lib     build separate device library],
[enable_device_lib=true],
[case "${DEV_LIB}" in
  yes) enable_device_lib=true
       AC_MSG_NOTICE(Enabled device library) ;;
  *) ;;
 esac])

dnl define HAS_DEV_LIB if device library enabled
AM_CONDITIONAL(HAS_DEV_LIB, [test x$enable_device_lib = xtrue])

dnl Does AC_SUBST(FNO_JUMP_TABLES).
CHECK_JUMP_TABLES_ISSUE

dnl Does AC_SUBST(HAS_DELAY_CYCLES).
CHECK_BUILTIN_DELAY_CYCLES

CHECK_CC_OPTION_AND_SET([-Wno-maybe-uninitialized], [WNO_MAYBE_UNINITIALIZED])
AC_SUBST(WNO_MAYBE_UNINITIALIZED)

dnl Does AM_CONDITIONAL(BUILD_FXLIB, ...)
CHECK_FIXED_POINT


dnl == Documentation =========================================================

dnl TODO: Check for various tools used to build the documentation. If anything
dnl is missing, don't build the docs by default.

dnl Disable building of dox by default since they may not build properly on
dnl all systems. This isn't optimal, but how do we work around the user not
dnl having fig2dev and still build all the formats?

AC_ARG_ENABLE(doc,
[  --enable-doc            build all doc formats (disabled is default)],
[case "${enableval}" in
  yes) enable_doc=yes ;;
  no)  enable_doc=no ;;
  *)   AC_MSG_ERROR(bad value ${enableval} for global doc option) ;;
 esac], [enable_doc=no])dnl
dnl Various documentation options.  By default, we enable all of them,
dnl i. e. HTML, Postscript, PDF, and Unix-style man pages.
AC_ARG_ENABLE(html-doc,
[  --enable-html-doc       build HTML documentation (default)],
[case "${enableval}" in
  yes) html_doc=yes ;;
  no)  html_doc=no ;;
  *)   AC_MSG_ERROR(bad value ${enableval} for html-doc option) ;;
 esac], [html_doc=yes])dnl

AC_ARG_ENABLE(pdf-doc,
[  --enable-pdf-doc        build PDF documentation (default)],
[case "${enableval}" in
  yes) pdf_doc=yes ;;
  no)  pdf_doc=no ;;
  *)   AC_MSG_ERROR(bad value ${enableval} for pdf-doc option) ;;
 esac], [pdf_doc=yes])dnl

dnl Man pages are currently not tunable; they'll be built whenever
dnl the HTML documentation is built.  However, it can be configured
dnl whether the result is about to be installed or not.
AC_ARG_ENABLE(man-doc,
[  --enable-man-doc        build Unix-style manual pages (default)],
[case "${enableval}" in
  yes) man_doc=yes ;;
  no)  man_doc=no ;;
  *)   AC_MSG_ERROR(bad value ${enableval} for man-doc option) ;;
 esac], [man_doc=yes])dnl

AC_ARG_ENABLE(versioned-doc,
[  --enable-versioned-doc  install docs in directory with version name (default)],
[case "${enableval}" in
  yes) versioned_doc=yes ;;
  no)  versioned_doc=no ;;
  *)   AC_MSG_ERROR(bad value ${enableval} for versioned-doc option) ;;
 esac], [versioned_doc=yes])dnl


CHECK_DOXYGEN
CHECK_PNG_UTILS

if test "$versioned_doc" = "yes"; then
	DOC_INST_DIR='${DESTDIR}${datadir}/doc/avr-libc-$(VERSION)'
	AVR_LIBC_USER_MANUAL="avr-libc-user-manual-${VERSION}"
else
	DOC_INST_DIR='${DESTDIR}${datadir}/doc/avr-libc'
	AVR_LIBC_USER_MANUAL="avr-libc-user-manual"
fi

dnl We only want to build the docs if the user has passed
dnl "--enable-doc" to configure.
if test "$enable_doc" = "yes"; then
	DOCSDIR='api'
else
	DOCSDIR=''
fi

AC_SUBST(DOCSDIR)
AC_SUBST(AVR_LIBC_USER_MANUAL)
AC_SUBST(DOC_INST_DIR)


dnl == Debug Info ============================================================

dnl Let the user decide which debug information to generate.
dnl Default is nothing, suitable for binary distributions of the
dnl compiled library.  Alternative options include stabs, dwarf-2,
dnl dwarf-4 or [compiler's default version] dwarf.
AC_ARG_ENABLE(debug-info,
[  --enable-debug-info=stabs|dwarf-2|dwarf-4  Enable generation of debugging information],
[case "${enableval}" in
  yes|dwarf2|dwarf-2) debuginfo=dwarf2 ;;
  no)                 debuginfo="" ;;
  stabs)              debuginfo=stabs ;;
  dwarf4|dwarf-4)     debuginfo=dwarf4 ;;
  dwarf)              debuginfo=dwarf ;;
  *)                  AC_MSG_ERROR([bad value ${enableval} for --enable-debug-info option; should be either stabs, dwarf-2, or dwarf-4]) ;;
 esac], [debuginfo=""])

dnl Decide which debuginfo information to include
case "$debuginfo" in
"")      CDEBUG=""; ASDEBUG="" ;;
stabs)   CDEBUG="-gstabs"; ASDEBUG="-Wa,-gstabs" ;;
dwarf2)  CDEBUG="-gdwarf-2"; ASDEBUG="-Wa,-gdwarf-2" ;;
dwarf4)  CDEBUG="-gdwarf-4"; ASDEBUG="-Wa,-gdwarf-2" ;;
dwarf)   CDEBUG="-gdwarf"; ASDEBUG="-Wa,-gdwarf-2" ;;
esac

AC_SUBST(CDEBUG)
AC_SUBST(ASDEBUG)


dnl == Devices and Multilibs =================================================

dnl The rest of the file deals with the files as geerated by mlib-gen.py
dnl during bootstrap.  Macros are defined that are used by the m4 files
dnl located in m4-gen.

# Used by Device.am i.e. avr/devices/<device>/Makefile.am.
CHECK_MULTI_OPTION([-mdouble=32], [double32], [double32])
CHECK_MULTI_OPTION([-mdouble=64], [double64], [double64])
CHECK_MULTI_OPTION([-mlong-double=32], [long_double32], [long-double32])
CHECK_MULTI_OPTION([-mlong-double=64], [long_double64], [long-double64])

# avr1
AM_CONDITIONAL(HAS_avr1, true)
DIR_avr1=avr1
AC_SUBST(DIR_avr1)

dnl Will be worked out by CHECK_AVR_DEVICE.
COND_DEFINED_Dx="0"
COND_DEFINED_Ex="0"
COND_DEFINED_SD="0"
SUPPORTED_MCUS=""

dnl Will be worked out by CHECK_AVR_RESERVED.
COND_BAUD_RESERVED="0"

dnl Runs CHECK_AVR_DEVICE, CHECK_AVR_CVT, CHECK_AVR_RESERVED for all MCUs.
m4_include([m4-gen/devices.m4])

AC_SUBST(SUPPORTED_MCUS)
AC_SUBST(COND_DEFINED_Dx)
AC_SUBST(COND_DEFINED_Ex)
AC_SUBST(COND_DEFINED_SD)
AC_SUBST(COND_BAUD_RESERVED)

dnl The following include must precede multilib.m4 and is only
dnl needed with avr-gcc v4.9 or older, namely if !HAS_DEV_LIB.
dnl Runs AC_SUBST(DEVLIST_<mlib>).
m4_include([m4-gen/devlist.m4])

dnl Runs CHECK_MULTI_VARIANT for all multilib variants.
m4_include([m4-gen/multilib.m4])


dnl == Generate all files from *.in sources  =================================

dnl include/avr/version.h.in is transformed by the respective Makefile[.am].
dnl The *.in scripts in devtools are transformed by the local configure.
AC_CONFIG_FILES([
	avr-libc.spec
	supported-mcus.txt
	include/avr/builtins.h
	include/util/delay.h
	doc/api/main_page.dox
])

dnl Makefile.in's made by automake from Makefile.am's.
AC_CONFIG_FILES([
	Makefile
	common/Makefile
	crt1/Makefile
	crt1/iosym/Makefile
	doc/Makefile
	doc/api/Makefile
	doc/examples/Makefile
	include/Makefile
	include/avr/Makefile
	include/bits/Makefile
	include/bits/devinfo.h
	include/compat/Makefile
	include/util/Makefile
	include/sys/Makefile
	libc/Makefile
	libc/misc/Makefile
	libc/pmstring/Makefile
	libc/stdio/Makefile
	libc/stdlib/Makefile
	libc/string/Makefile
	libc/time/Makefile
	libm/Makefile
	libm/fplib/Makefile
	libm/fxlib/Makefile
	m4/Makefile
	scripts/Makefile
	devtools/Makefile
])

dnl Runs AC_CONFIG_FILES on all Makefile.am's from mlib-gen.py.
m4_include([m4-gen/files.m4])

AC_OUTPUT
