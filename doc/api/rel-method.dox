/* Copyright (c) 2003,2005,2007 Theodore Roth
   All rights reserved.

   Redistribution and use in source and binary forms, with or without
   modification, are permitted provided that the following conditions are met:

   * Redistributions of source code must retain the above copyright
     notice, this list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright
     notice, this list of conditions and the following disclaimer in
     the documentation and/or other materials provided with the
     distribution.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  POSSIBILITY OF SUCH DAMAGE. */

/* $Id$ */

/** \page release_method Release Numbering and Methodology

\section version_info Release Version Numbering Scheme

Release numbers consist of three parts, a major number, a minor
number, and a revision number, each separated by a dot.

The major number is currently 2, to indicate the multilib layout has
been adapted to the fairly different one used starting with AVR-GCC
version 5.  Nevertheless, it is still believed to be generally
API-compatible with release versions 1.x.

In the past (up to 1.6.x), even minor numbers have been used to
indicate "stable" releases, and odd minor numbers have been reserved
for development branches/versions.  As the latter has never really
been used, and maintaining a stable branch that eventually became
effectively the same as the development version has proven to be just
a cumbersome and tedious job, this scheme has given up in early 2010,
so starting with 1.7.0, every minor number will be used.  Minor
numbers will be bumped upon judgement of the development team,
whenever it seems appropriate, but at least in cases where some API
was changed.

Starting with version 1.4.0, a file <avr/version.h> indicates the
library version of an installed library tree.

\section release_info Releasing AVR-LibC

The information in this section is only relevant to AVR-LibC developers and
can be ignored by end users.

\note In what follows, I assume you know how to use SVN and how to checkout
multiple source trees in a single directory without having them clobber each
other. If you don't know how to do this, you probably shouldn't be making
releases or cutting branches.

\subsection release_branch Creating an SVN branch

The following steps should be taken to cut a branch in SVN (assuming
$username is set to your savannah username):

-# Check out a fresh source tree from SVN trunk.
-# Update the NEWS file with pending release number and commit to SVN trunk:<br>
   Change <em>Changes since avr-libc-\<last_release\>:</em> to 
   <em>Changes in avr-libc-\<this_relelase\></em>.
-# Set the branch-point tag (setting \<major\> and \<minor\> accordingly):<br>
   <tt>svn copy svn+ssh://$username\@svn.savannah.nongnu.org/avr-libc/trunk svn+ssh://$username\@svn.savannah.nongnu.org/avr-libc/tags/avr-libc-\<</tt><em>major</em><tt>\>_\<</tt><em>minor</em><tt>\>-branchpoint</tt>
-# Create the branch:<br>
   <tt>svn copy svn+ssh://$username\@svn.savannah.nongnu.org/avr-libc/trunk svn+ssh://$username\@svn.savannah.nongnu.org/avr-libc/branches/avr-libc-\<</tt><em>major</em><tt>\>_\<</tt><em>minor</em><tt>\>-branch</tt>
-# Update the package version in configure.ac and commit configure.ac to SVN trunk:<br>
   Change minor number to next odd value.
-# Update the NEWS file and commit to SVN trunk:<br>
   Add <em>Changes since avr-libc-\<this_release\>:</em>
-# Check out a new tree for the branch:<br>
   <tt>svn co svn+ssh://$username\@svn.savannah.nongnu.org/avr-libc/branches/avr-libc-\<</tt><em>major</em><tt>\>_\<</tt><em>minor</em><tt>\>-branch</tt>
-# Update the package version in configure.ac and commit configure.ac to SVN branch:<br>
   Change the patch number to 90 to denote that this now a branch leading up
   to a release. Be sure to leave the \<date\> part of the version.
-# Bring the build system up to date by running bootstrap and configure.
-# Perform a 'make distcheck' and make sure it succeeds. This will create the
   snapshot source tarball. This should be considered the first release
   candidate.
-# Upload the snapshot tarball to savannah.
-# Update the bug tracker interface on Savannah: Bugs &mdash;&gt; Edit
   field values &mdash;&gt; Release / Fixed Release
-# Announce the branch and the branch tag to the avr-libc-dev list so other
   developers can checkout the branch.

\subsection release_rolling Making a release

A stable release will only be done on a branch, not from the SVN trunk.

The following steps should be taken when making a release:

-# Make sure the source tree you are working from is on the correct branch:<br>
   <tt>svn switch svn+ssh://$username\@svn.savannah.nongnu.org/avr-libc/branches/avr-libc-\<</tt><em>major</em><tt>\>_\<</tt><em>minor</em><tt>\>-branch</tt>
-# Update the package version in configure.ac and commit it to SVN.
-# Update the gnu tool chain version requirements in the README and commit
   to SVN.
-# Update the ChangeLog file to note the release and commit to SVN on the
   branch:<br>
   Add <em>Released avr-libc-\<this_release\>.</em>
-# Update the NEWS file with pending release number and commit to SVN:<br>
   Change <em>Changes since avr-libc-\<last_release\>:</em> to
   <em>Changes in avr-libc-\<this_relelase\>:</em>.
-# Bring the build system up to date by running bootstrap and configure.
-# Perform a 'make distcheck' and make sure it succeeds. This will create the
   source tarball.
-# Tag the release:<br>
   <tt>svn copy . svn+ssh://$username\@svn.savannah.nongnu.org/avr-libc/tags/avr-libc-\<</tt><em>major</em><tt>\>_\<</tt><em>minor</em><tt>\>_\<</tt><em>patch</em><tt>\>-release</tt><br>
   or<br>
   <tt>svn copy svn+ssh://$username\@svn.savannah.nongnu.org/avr-libc/branches/avr-libc-\<</tt><em>major</em><tt>\>_\<</tt><em>minor</em><tt>\>-branch svn+ssh://$username\@svn.savannah.nongnu.org/avr-libc/tags/avr-libc-\<</tt><em>major</em><tt>\>_\<</tt><em>minor</em><tt>\>_\<</tt><em>patch</em><tt>\>-release</tt>
-# Upload the tarball to savannah.
-# Update the NEWS file, and commit to SVN:<br>
   Add <em>Changes since avr-libc-\<major\>_\<minor\>_\<patch\>:</em>
-# Update the bug tracker interface on Savannah: Bugs &mdash;&gt; Edit
   field values &mdash;&gt; Release / Fixed Release
-# Generate the latest documentation and upload to savannah.
-# Announce the release.

The following hypothetical diagram should help clarify version and branch
relationships.

\image html releases.png "Release tree"
\image latex releases.eps "Release tree" width=5in

*/
